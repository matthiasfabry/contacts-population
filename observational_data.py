"""
Contains all the observed parameters of massive (near-) contact systems. References are in Table B.1 and B.2.
"""
import numpy as np

# taken from Menon+2021, except where clearly inconsistent, then
# taken from most recent reference cited in Menon+2021

# index, values
#  0 name,
#  1 p,
#  2 q,
#  3 m1,
#  4 m2,
#  5 r1,
#  6 r2,
#  7 teff1,
#  8 teff2,
#  9 r/rl1,
# 10 r/rl2,
# 11 dq,
# 12 dR1+,
# 13 dR1-,
# 14 dR2+,
# 15 dR2-,
# 16 dT1+,
# 17 dT1-,
# 18 dT2+,
# 19 dT2-
dtype = np.dtype(dict(names=['name', 'p', 'q', 'm1', 'm2', 'r1', 'r2', 'teff1', 'teff2',
                             'rrl1', 'rrl2', 'dq', 'dr1+', 'dr1-', 'dr2+', 'dr2-',
                             'dt1+', 'dt1-', 'dt2+', 'dt2-'],
                      formats=['U10', float, float, float, float, float, float, float, float,
                               float, float, float, float, float, float, float, float, float, float,
                               float]))

# dtype = np.dtype("a20, (19)f8")
mcdata = np.array(
    [('VFTS352', 1.124, 0.99, 28.85, 28.63, 7.25, 7.22, 41450, 41150, 1.06, 1.06,
      0.02, 0.02, 0.02, 0.02, 0.02, 800, 1170, 1200, 1100),
     ('VFTS066', 1.141, 0.52, 13, 6.6, 5.8, 4.4, 32800, 29000, 1.07, 1.09,
      0.05, 0.5, 0.8, 0.4, 0.8, 1700, 1000, 1000, 1200),
     ('VFTS661', 1.266, 0.71, 27.3, 19.4, 6.8, 5.7, 38400, 31800, 0.94, 0.92,
      0.02, 0, 0, 0, 0, 900, 400, 1400, 600),
     ('VFTS217', 1.855, 0.83, 46.8, 38.9, 10.1, 9.4, 45000, 41800, 0.91, 0.92,
      0.01, 1.5, 1.2, 1.4, 1.0, 1600, 400, 1700, 600),
     ('VFTS563', 1.217, 0.76, 26.2, 20.0, 6.6, 5.8, 32400, 32400, 0.95, 0.95,
      0.07, 0.4, 0.7, 0.4, 0.6, 1000, 900, 1200, 900),
     ('MACHO-CB', 1.400, 0.64, 41.0, 27.0, 9.56, 7.99, 50000, 49500, 1.06, 1.09,
      0.01, 0.02, 0.02, 0.05, 0.05, 0, 0, 0, 0),
     ('SMC108086', 0.883, 0.85, 16.9, 14.3, 5.7, 5.3, 33600, 34200, 1.10, 1.10,
      0.15, 0.2, 0.2, 0.2, 0.2, 1000, 1000, 1500, 1500),
     ], dtype=dtype
)

mwdata = np.array(
    [('V382Cyg', 1.885, 0.73, 26.1, 19.0, 9.4, 8.7, 37200, 38250, 1.01, 1.08,
      0.017, 0.2, 0.2, 0.2, 0.2, 690, 720, 725, 750),
     ('TU Mus', 1.387, 0.624, 16.7, 10.4, 7.2, 5.7, 38700, 33200, 1.10, 1.06,
      0.009, 0.5, 0.5, 0.5, 0.5, 0, 0, 0, 0),
     ('LY Aur', 4.002, 0.55, 25.5, 14.0, 16.1, 12.6, 31000, 31100, 1.03, 1.03,
      0, 0, 0, 0, 0, 0, 0, 0, 0),
     # r1/r2 not modeled on same equipotential
     ('V701 Sco', 0.762, 0.99, 9.8, 9.7, 4.1, 4.1, 23500, 23400, 1.10, 1.10,
      0, 0.4, 0.4, 0.2, 0.2, 1000, 1000, 50, 50),
     ('CT Tau', 0.666, 0.98, 14.2, 14.0, 4.9, 4.9, 25400, 25600, 1.30, 1.30,
      0, 0.4, 0.4, 0.2, 0.2, 2200, 2200, 200, 200),
     ('GU Mon', 0.896, 0.97, 8.8, 8.6, 4.6, 4.6, 28000, 27800, 1.20, 1.20,
      0, 0.25, 0.25, 0.25, 0.25, 2000, 2000, 70, 70),
     ('XZ Cep', 5.097, 0.50, 18.7, 9.3, 14.2, 14.2, 28000, 24000, 0.85, 1.17,
      0.01, 0.1, 0.1, 0.1, 0.1, 1000, 1000, 3000, 3000),
     ('LSS 3074', 2.185, 0.86, 17.2, 14.6, 8.2, 7.5, 34100, 39900, 0.92, 0.93,
      0.04, 0.7, 0.7, 0.6, 0.6, 1500, 1500, 1500, 1500),
     ('MY Cam', 1.175, 0.84, 37.7, 31.6, 7.6, 7.1, 42200, 39000, 0.99, 1.01,
      0.03, 0.1, 0.1, 0.1, 0.1, 1500, 1500, 1500, 1500),
     ('V348 Car', 5.600, 0.90, 32.0, 29.4, 18.8, 19.3, 29700, 26200, 0.93, 1.00,
      0.02, 1.4, 1.4, 1.4, 1.4, 1300, 1300, 0, 0),
     ('V729 Cyg', 6.597, 0.28, 31.6, 8.8, 25.6, 14.5, 28000, 21300, 1.03, 1.03,
      0, 1.1, 1.1, 1.0, 1.0, 0, 0, 3700, 3700),
     ('BH Cen', 0.792, 0.84, 9.4, 7.9, 4.0, 3.7, 17900, 17400, 1.09, 1.09,
      0.003, 0.7, 0.7, 0.7, 0.7, 0, 0, 0, 0.02),
     ('SV Cen', 1.658, 0.8, 9.6, 7.7, 7.8, 7.3, 16000, 24000, 1.28, 1.33,
      0.078, 0, 0, 0, 0, 0, 0, 0, 0),
     ('V606 Cen', 1.490, 0.83, 14.3, 8.0, 6.8, 5.13, 29500, 21900, 1.05, 1.03,
      0, 0.06, 0.06, 0.5, 0.5, 0, 0, 0, 0),
     ('HD64315', 1.019, 1.00, 14.6, 14.6, 5.5, 5.3, 32000, 32000, 1.1, 1.07,
      0.09, 0.5, 0.5, 0.5, 0.5, 0, 0, 0, 0),
     ('V745 Cas', 1.411, 0.571, 18.31, 10.47, 6.94, 5.35, 30000, 25540, 0.99, 0.99,
      0.01, 0.07, 0.07, 0.05, 0.05, 0, 0, 300, 300),
     ('M31VJ20', 1.604, 0.924, 18, 16.8, 7.2, 6.8, 31600, 27300, 0.99, 0.97,
      0, 0, 0, 0, 0, 0, 0, 0, 0),
     ('M21VJ05', 0.917, 0.974, 23, 22.4, 6.7, 6.6, 35100, 34400, 1.24, 1.24,
      0, 0, 0, 0, 0, 0, 0, 0, 0)
     ], dtype=dtype
)

alldata = np.concatenate((mcdata, mwdata))


def get_q(ary):
    return ary['q']


def get_q_error(ary):
    return ary['dq']


def get_p(ary):
    return ary['p']


def get_lum_ratio(ary):
    t1s = ary['teff1']
    t2s = ary['teff2']
    r1s = ary['r1']
    r2s = ary['r2']
    l1s = r1s ** 2 * t1s ** 4
    l2s = r2s ** 2 * t2s ** 4
    return l2s / l1s


def get_lr_error(ary):
    lrs = get_lum_ratio(ary)
    err_plus = lrs * (4 * (ary['dr1+'] / ary['r1']) ** 2 +
                      4 * (ary['dr2+'] / ary['r2']) ** 2 +
                      16 * (ary['dt1+'] / ary['teff1']) ** 2 +
                      16 * (ary['dt2+'] / ary['teff2']) ** 2)
    err_min = lrs * (4 * (ary['dr1-'] / ary['r1']) ** 2 +
                     4 * (ary['dr2-'] / ary['r2']) ** 2 +
                     16 * (ary['dt1-'] / ary['teff1']) ** 2 +
                     16 * (ary['dt2-'] / ary['teff2']) ** 2)
    return [err_min, err_plus]


def eggl(q):
    return 0.49 * q ** (-2 / 3) / (0.6 * q ** (-2 / 3) + np.log(1 + q ** (-1 / 3)))


secday = 86400
G = 6.674e-11  # SI FTW
Msun = 1.988e30  # kg
Rsun = 6.957e8  # m


def get_overflow(ary):
    sep = np.cbrt(G * Msun * (ary['m1'] + ary['m2']) * (ary['p'] * secday) ** 2 / (4 * np.pi ** 2))
    rl1 = eggl(ary['q']) * sep  # in meter
    rl2 = eggl(1 / ary['q']) * sep
    return ary['r1'] * Rsun / rl1, ary['r2'] * Rsun / rl2
